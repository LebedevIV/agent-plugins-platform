/**
 * ui/test-harness.js
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ UI (index.html).
 */

import { getAvailablePlugins } from '../core/plugin-manager.js';
import { createPluginCard } from './PluginCard.js';
import { hostApi } from '../core/host-api.js';
import { runWorkflow } from '../core/workflow-engine.js';
import { showSuccessToast, showErrorToast, showInfoToast, showWarningToast } from './toast-notifications.js';

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Host-API ---
window.hostApi = hostApi;

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º sendMessageToChat –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sidebar
window.hostApi.sendMessageToChat = (message) => {
    // –õ–æ–≥–∏ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ sidebar —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–∏
    console.log("[Python Message] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è sidebar:", message.content);
};

console.log('–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–µ–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (v0.6.0).');

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–≥–∏–Ω–µ
function showPluginInfo(plugin) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞
    const isEnabled = getPluginState(plugin.id);
    
    // --- –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É ---
    const rightSidebar = document.querySelector('.ide-sidebar-right');
    if (rightSidebar) {
        rightSidebar.innerHTML = `
          <div class="plugin-info">
            <h2>${plugin.name}</h2>
            <div class="plugin-meta">
              <span class="version">–í–µ—Ä—Å–∏—è: ${plugin.version}</span>
              <span class="id">ID: ${plugin.id}</span>
            </div>
            <div class="plugin-description">
              <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
              <p>${plugin.description}</p>
            </div>
            <div class="plugin-actions">
              <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
              <div class="plugin-toggle">
                <label class="toggle-switch">
                  <input type="checkbox" id="toggle-${plugin.id}" onchange="togglePlugin('${plugin.id}', this.checked)" ${isEnabled ? 'checked' : ''}>
                  <span class="toggle-slider"></span>
                </label>
                <span class="toggle-label">–í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≥–∏–Ω</span>
              </div>
              <button class="view-manifest-btn" onclick="viewManifest('${plugin.id}')">
                üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç
              </button>
              <button class="view-workflow-btn" onclick="viewWorkflow('${plugin.id}')">
                üîÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å workflow
              </button>
            </div>
            <div class="plugin-files">
              <h3>–§–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–∞</h3>
              <ul>
                <li>üìÑ manifest.json</li>
                <li>üêç mcp_server.py</li>
                <li>‚öôÔ∏è workflow.json</li>
                <li>üé® icon.svg</li>
              </ul>
            </div>
          </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞
window.togglePlugin = async function(pluginId, enabled) {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –≤ localStorage
        const pluginStates = JSON.parse(localStorage.getItem('pluginStates') || '{}');
        pluginStates[pluginId] = enabled;
        localStorage.setItem('pluginStates', JSON.stringify(pluginStates));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const card = document.querySelector(`.plugin-card[data-plugin-id="${pluginId}"]`);
        if (card) {
            if (enabled) {
                card.classList.remove('disabled');
                showSuccessToast(`–ü–ª–∞–≥–∏–Ω –≤–∫–ª—é—á–µ–Ω`);
            } else {
                card.classList.add('disabled');
                showInfoToast(`–ü–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω`);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        const toggle = document.getElementById(`toggle-${pluginId}`);
        if (toggle) {
            toggle.checked = enabled;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞:', error);
        showErrorToast(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞
function getPluginState(pluginId) {
    try {
        const pluginStates = JSON.parse(localStorage.getItem('pluginStates') || '{}');
        return pluginStates[pluginId] || false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø–æ ID
async function getPluginById(pluginId) {
    try {
        const plugins = await getAvailablePlugins();
        return plugins.find(p => p.id === pluginId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–≥–∏–Ω–∞
window.viewManifest = function(pluginId) {
    showInfoToast(`–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞ ${pluginId}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ manifest.json
}

window.viewWorkflow = function(pluginId) {
    showInfoToast(`–ü—Ä–æ—Å–º–æ—Ç—Ä workflow –ø–ª–∞–≥–∏–Ω–∞ ${pluginId}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ workflow.json
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤
async function displayPlugins() {
    const pluginsListContainer = document.getElementById('plugins-list');
    if (!pluginsListContainer) return;
    
    try {
        const plugins = await getAvailablePlugins();
        pluginsListContainer.innerHTML = '';
        plugins.forEach(plugin => {
            const pluginCard = createPluginCard(plugin);
            // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É
            pluginCard.dataset.pluginId = plugin.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞
            const isEnabled = getPluginState(plugin.id);
            if (!isEnabled) {
                pluginCard.classList.add('disabled');
            }
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–≥–∏–Ω–µ
            pluginCard.onclick = () => showPluginInfo(plugin);
            pluginsListContainer.appendChild(pluginCard);
        });
    } catch (error) {
        pluginsListContainer.textContent = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–æ–≤: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ –≤ displayPlugins:", error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
function setupTabs() {
  const tabContainer = document.querySelector('.tab-nav');
  if (!tabContainer) return;
  tabContainer.addEventListener('click', (event) => {
    const clickedButton = event.target.closest('.tab-button');
    if (!clickedButton) return;
    const tabId = clickedButton.dataset.tab;
    if (!tabId) return;
    tabContainer.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.add('hidden'));
    clickedButton.classList.add('active');
    document.getElementById(tabId)?.classList.remove('hidden');
  });
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ ---

// –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
window.pasteFromClipboard = async function(inputId) {
    try {
        const text = await navigator.clipboard.readText();
        document.getElementById(inputId).value = text;
        showSuccessToast('–ö–ª—é—á –≤—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞:', error);
        showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
window.copyToClipboard = async function(inputId) {
    try {
        const input = document.getElementById(inputId);
        await navigator.clipboard.writeText(input.value);
        showSuccessToast('–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä:', error);
        showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ curl –∑–∞–ø—Ä–æ—Å–∞
window.extractKeyFromCurl = function(curlInputId, keyInputId) {
    try {
        const curlInput = document.getElementById(curlInputId);
        const keyInput = document.getElementById(keyInputId);
        const curlText = curlInput.value;
        
        // –ò—â–µ–º API –∫–ª—é—á –≤ curl –∑–∞–ø—Ä–æ—Å–µ
        const apiKeyMatch = curlText.match(/['"]?api[_-]?key['"]?\s*[:=]\s*['"]([^'"]+)['"]/i) ||
                           curlText.match(/['"]?authorization['"]?\s*[:=]\s*['"]?bearer\s+([^'"\s]+)['"]?/i) ||
                           curlText.match(/['"]?x-api-key['"]?\s*[:=]\s*['"]([^'"]+)['"]/i);
        
        if (apiKeyMatch && apiKeyMatch[1]) {
            keyInput.value = apiKeyMatch[1];
            showSuccessToast('API –∫–ª—é—á –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ curl –∑–∞–ø—Ä–æ—Å–∞');
        } else {
            showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ API –∫–ª—é—á –≤ curl –∑–∞–ø—Ä–æ—Å–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
        showErrorToast('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ curl');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö API –∫–ª—é—á–µ–π
window.saveAIKeys = function() {
    try {
        const keys = {
            'gemini-flash': document.getElementById('gemini-flash-key').value,
            'gemini-25': document.getElementById('gemini-25-key').value
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–∏
        const customKeys = getCustomKeys();
        Object.assign(keys, customKeys);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('aiApiKeys', JSON.stringify(keys));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        updateKeyStatuses();
        
        showSuccessToast('API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π:', error);
        showErrorToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π');
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π
window.testAIKeys = async function() {
    try {
        const keys = JSON.parse(localStorage.getItem('aiApiKeys') || '{}');
        const results = {};
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
        for (const [keyName, keyValue] of Object.entries(keys)) {
            if (keyValue) {
                try {
                    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
                    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
                    const isValid = keyValue.length > 20 && keyValue.includes('AIza');
                    results[keyName] = isValid;
                } catch (error) {
                    results[keyName] = false;
                }
            } else {
                results[keyName] = false;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        updateKeyStatuses(results);
        
        showSuccessToast('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π:', error);
        showErrorToast('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–ª—é—á–µ–π
function updateKeyStatuses(testResults = null) {
    const keys = JSON.parse(localStorage.getItem('aiApiKeys') || '{}');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    const fixedStatusElements = {
        'gemini-flash': document.getElementById('gemini-flash-status'),
        'gemini-25': document.getElementById('gemini-25-status')
    };
    
    for (const [keyName, statusElement] of Object.entries(fixedStatusElements)) {
        if (statusElement) {
            const hasKey = keys[keyName] && keys[keyName].length > 0;
            const isTested = testResults && keyName in testResults;
            
            if (isTested && testResults[keyName]) {
                statusElement.textContent = '–†–∞–±–æ—Ç–∞–µ—Ç';
                statusElement.className = 'key-status configured';
            } else if (hasKey) {
                statusElement.textContent = '–ù–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status configured';
            } else {
                statusElement.textContent = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status';
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π
    const customKeyElements = document.querySelectorAll('.custom-key-item');
    customKeyElements.forEach(element => {
        const keyId = element.id;
        const statusElement = element.querySelector('.key-status');
        const keyInput = element.querySelector('input[type="password"]');
        
        if (statusElement && keyInput) {
            const hasKey = keyInput.value && keyInput.value.length > 0;
            const isTested = testResults && keyId in testResults;
            
            if (isTested && testResults[keyId]) {
                statusElement.textContent = '–†–∞–±–æ—Ç–∞–µ—Ç';
                statusElement.className = 'key-status configured';
            } else if (hasKey) {
                statusElement.textContent = '–ù–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status configured';
            } else {
                statusElement.textContent = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status';
            }
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
window.addCustomKey = function() {
    const customKeysList = document.getElementById('custom-keys-list');
    const keyId = 'custom-key-' + Date.now();
    
    const keyHtml = `
        <div class="custom-key-item" id="${keyId}">
            <button class="remove-key-btn" onclick="removeCustomKey('${keyId}')">–£–¥–∞–ª–∏—Ç—å</button>
            <div class="ai-key-header">
                <h4>
                    <input type="text" class="key-name-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏" 
                           onchange="updateCustomKeyName('${keyId}', this.value)">
                </h4>
                <span class="key-status" id="${keyId}-status">–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>
                <span class="key-badge paid">–ü–ª–∞—Ç–Ω—ã–π</span>
            </div>
            <div class="ai-key-input">
                <input type="password" id="${keyId}-key" placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á">
                <button onclick="pasteFromClipboard('${keyId}-key')">–í—Å—Ç–∞–≤–∏—Ç—å</button>
                <button onclick="copyToClipboard('${keyId}-key')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            </div>
            <div class="curl-validator">
                <input type="text" id="${keyId}-curl" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ curl –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞">
                <button onclick="extractKeyFromCurl('${keyId}-curl', '${keyId}-key')">–ò–∑–≤–ª–µ—á—å –∫–ª—é—á</button>
            </div>
        </div>
    `;
    
    customKeysList.insertAdjacentHTML('beforeend', keyHtml);
    showSuccessToast('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
window.removeCustomKey = function(keyId) {
    const keyElement = document.getElementById(keyId);
    if (keyElement) {
        keyElement.remove();
        showSuccessToast('–ö–ª—é—á —É–¥–∞–ª–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
window.updateCustomKeyName = function(keyId, name) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ localStorage
    const customKeyNames = JSON.parse(localStorage.getItem('customKeyNames') || '{}');
    customKeyNames[keyId] = name;
    localStorage.setItem('customKeyNames', JSON.stringify(customKeyNames));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π
function getCustomKeys() {
    const customKeys = {};
    const customKeyElements = document.querySelectorAll('.custom-key-item');
    
    customKeyElements.forEach(element => {
        const keyId = element.id;
        const keyInput = element.querySelector('input[type="password"]');
        if (keyInput && keyInput.value) {
            customKeys[keyId] = keyInput.value;
        }
    });
    
    return customKeys;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
function loadSavedKeys() {
    try {
        const keys = JSON.parse(localStorage.getItem('aiApiKeys') || '{}');
        
        if (keys['gemini-flash']) {
            document.getElementById('gemini-flash-key').value = keys['gemini-flash'];
        }
        if (keys['gemini-25']) {
            document.getElementById('gemini-25-key').value = keys['gemini-25'];
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–∏
        loadCustomKeys(keys);
        
        updateKeyStatuses();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π
function loadCustomKeys(keys) {
    const customKeyNames = JSON.parse(localStorage.getItem('customKeyNames') || '{}');
    
    Object.keys(keys).forEach(keyId => {
        if (keyId.startsWith('custom-key-') && keys[keyId]) {
            // –í–æ—Å—Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
            const customKeysList = document.getElementById('custom-keys-list');
            const keyName = customKeyNames[keyId] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å';
            
            const keyHtml = `
                <div class="custom-key-item" id="${keyId}">
                    <button class="remove-key-btn" onclick="removeCustomKey('${keyId}')">–£–¥–∞–ª–∏—Ç—å</button>
                    <div class="ai-key-header">
                        <h4>
                            <input type="text" class="key-name-input" value="${keyName}" 
                                   onchange="updateCustomKeyName('${keyId}', this.value)">
                        </h4>
                        <span class="key-status" id="${keyId}-status">–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>
                        <span class="key-badge paid">–ü–ª–∞—Ç–Ω—ã–π</span>
                    </div>
                    <div class="ai-key-input">
                        <input type="password" id="${keyId}-key" value="${keys[keyId]}" placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á">
                        <button onclick="pasteFromClipboard('${keyId}-key')">–í—Å—Ç–∞–≤–∏—Ç—å</button>
                        <button onclick="copyToClipboard('${keyId}-key')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                    <div class="curl-validator">
                        <input type="text" id="${keyId}-curl" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ curl –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞">
                        <button onclick="extractKeyFromCurl('${keyId}-curl', '${keyId}-key')">–ò–∑–≤–ª–µ—á—å –∫–ª—é—á</button>
                    </div>
                </div>
            `;
            
            customKeysList.insertAdjacentHTML('beforeend', keyHtml);
        }
    });
}

// --- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
displayPlugins();
setupTabs();
loadSavedKeys();