/**
 * Test Harness UI
 *
 * –≠—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ Host-API.
 */

// import { getAvailablePlugins } from '../core/plugin-manager.js';
// import { runWorkflow } from '../core/workflow-engine.js';
// import { hostApi } from '../core/host-api.js';
// import { pluginStateManager } from '../core/index.js';
import { showSuccessToast, showErrorToast, showInfoToast, showWarningToast } from './toast-notifications.js';
import { createPluginCard } from './PluginCard.js';
import { createRunLogger } from './log-manager.js';
import { createJsonViewer } from './json-viewer.js';
import { usePluginList } from './hooks/usePluginList.js';
import { usePluginDetails } from './hooks/usePluginDetails.js';
import { usePluginState } from './hooks/usePluginState.js';
import { useErrorHandler } from './hooks/useErrorHandler.js';
import { useAIKeys } from './hooks/useAIKeys.js';
import { useCustomKeyNames } from './hooks/useCustomKeyNames.js';
import { useFileViewer } from './hooks/useFileViewer.js';

// --- –ö–û–î –ò–ó core/plugin-state-manager.js ---
const pluginStateManager = {
    async getAllStates() {
        const { pluginStates = {} } = await chrome.storage.sync.get('pluginStates');
        return pluginStates;
    },
    async getState(pluginId) {
        const states = await this.getAllStates();
        return states[pluginId] || { enabled: true, autoRun: false };
    },
    async setState(pluginId, state) {
        const states = await this.getAllStates();
        states[pluginId] = state;
        await chrome.storage.sync.set({ pluginStates: states });
    },
    async updateState(pluginId, updates) {
        const currentState = await this.getState(pluginId);
        const newState = { ...currentState, ...updates };
        await this.setState(pluginId, newState);
    },
    onStateChanged(callback) {
        chrome.storage.onChanged.addListener((changes, namespace) => {
            if (namespace === 'sync' && changes.pluginStates) {
                callback(changes.pluginStates.newValue);
            }
        });
    }
};
// --- –ö–û–ù–ï–¶ –ö–û–î–ê –ò–ó core/plugin-state-manager.js ---

// –ú—ã –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å getAvailablePlugins, –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–≥–ª—É—à–∫—É
async function getAvailablePlugins() {
    console.warn("–§—É–Ω–∫—Ü–∏—è getAvailablePlugins —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫.");
    return [
      { name: 'ozon-analyzer', description: '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ Ozon', version: '1.0.0', id: 'ozon-analyzer' },
      { name: 'time-test', description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏', version: '1.0.0', id: 'time-test' },
      { name: 'google-helper', description: '–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Google', version: '1.0.0', id: 'google-helper' }
    ];
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Host-API ---
// window.hostApi = hostApi; // hostApi –±–æ–ª—å—à–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º sendMessageToChat –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sidebar
// window.hostApi.sendMessageToChat = (message) => { ... };

console.log('–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–µ–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (v0.6.0).');

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
function handleUrlParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    const pluginName = urlParams.get('plugin');
    const tab = urlParams.get('tab');
    
    if (pluginName && tab === 'settings') {
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞:', pluginName);
        // –ù–∞–π–¥–µ–º –ø–ª–∞–≥–∏–Ω –∏ –ø–æ–∫–∞–∂–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        setTimeout(async () => {
            const plugins = await getAvailablePlugins();
            const plugin = plugins.find(p => p.name === pluginName || p.id === pluginName);
            if (plugin) {
                showPluginInfo(plugin);
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤
                const pluginsTab = document.querySelector('[data-tab="plugins"]');
                if (pluginsTab) {
                    pluginsTab.click();
                }
            } else {
                console.error('–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', pluginName);
            }
        }, 100);
    }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

// –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–≥–∏–Ω–µ —á–µ—Ä–µ–∑ —Ö—É–∫–∏
async function showPluginInfo(plugin) {
    const { manifest, state, domains } = await usePluginDetails(plugin.id);
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.plugin-card').forEach(card => {
        card.classList.remove('selected');
    });
    // –í—ã–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
    const currentCard = document.querySelector(`[data-plugin-name="${plugin.name}"]`);
    if (currentCard) {
        currentCard.classList.add('selected');
    }
    // --- –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É ---
    const rightSidebar = document.querySelector('.ide-sidebar-right');
    if (rightSidebar) {
        rightSidebar.innerHTML = `
          <div class="plugin-info">
            <h2>${manifest.name}</h2>
            <div class="plugin-meta">
              <span class="version">–í–µ—Ä—Å–∏—è: ${manifest.version}</span>
              <span class="id">ID: ${plugin.id}</span>
            </div>
            <div class="plugin-description">
              <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
              <p>${manifest.description}</p>
            </div>
            ${domains.length > 0 ? `
            <div class="plugin-domains">
              <h3>üåê –ü–ª–∞–≥–∏–Ω –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —Å–∞–π—Ç–∞—Ö:</h3>
              <ul class="plugin-domains-list">
                ${domains.map(domain => `<li><code>${domain}</code></li>`).join('')}
              </ul>
            </div>
            ` : ''}
            <div class="plugin-actions">
              <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
              <div class="plugin-toggle">
                <label class="toggle-switch">
                  <input type="checkbox" data-plugin-name="${plugin.name}" data-state-key="enabled" 
                         onchange="handleToggleChange(this)" ${state.enabled ? 'checked' : ''}>
                  <span class="toggle-slider"></span>
                </label>
                <span class="toggle-label">–í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≥–∏–Ω</span>
              </div>
              <div class="plugin-toggle">
                <label class="toggle-switch">
                  <input type="checkbox" data-plugin-name="${plugin.name}" data-state-key="autoRun"
                         onchange="handleToggleChange(this)" ${state.autoRun ? 'checked' : ''}>
                  <span class="toggle-slider"></span>
                </label>
                <span class="toggle-label">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ</span>
              </div>
              <button class="view-manifest-btn" onclick="viewManifest('${plugin.id}')">
                üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç
              </button>
              <button class="view-workflow-btn" onclick="viewWorkflow('${plugin.id}')">
                üîÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å workflow
              </button>
            </div>
            <div class="plugin-files">
              <h3>–§–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–∞</h3>
              <ul>
                <li>üìÑ manifest.json</li>
                <li>üêç mcp_server.py</li>
                <li>‚öôÔ∏è workflow.json</li>
                <li>üé® icon.svg</li>
              </ul>
            </div>
          </div>
        `;
    }
}

// –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ö—É–∫
async function displayPlugins() {
    const plugins = await usePluginList();
    const pluginsList = document.getElementById('plugins-list');
    pluginsList.innerHTML = '';
    plugins.forEach(plugin => {
        const card = createPluginCard(plugin);
        card.setAttribute('data-plugin-name', plugin.name);
        card.onclick = () => showPluginInfo(plugin);
        pluginsList.appendChild(card);
    });
}

// –ù–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
window.handleToggleChange = async function(checkbox) {
    const pluginName = checkbox.dataset.pluginName;
    const stateKey = checkbox.dataset.stateKey; // 'enabled' –∏–ª–∏ 'autoRun'
    const value = checkbox.checked;
    const { error, success } = useErrorHandler();
    try {
        const currentState = await usePluginState.getState(pluginName);
        const newState = { ...currentState, [stateKey]: value };
        await usePluginState.setState(pluginName, newState);
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –º–µ–Ω—è–ª–∏ enabled
        if (stateKey === 'enabled') {
            const card = document.querySelector(`.plugin-card[data-plugin-name="${pluginName}"]`);
            if (card) {
                card.classList.toggle('disabled', !value);
            }
        }
        success(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${pluginName}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
    } catch (e) {
        error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}`);
        checkbox.checked = !value; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ –ø–æ ID
async function getPluginById(pluginId) {
    try {
        const plugins = await getAvailablePlugins();
        return plugins.find(p => p.id === pluginId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞:', error);
        return null;
    }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
function showFileModal(title, contentHtml) {
    let modal = document.getElementById('file-viewer-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'file-viewer-modal';
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100vw';
        modal.style.height = '100vh';
        modal.style.background = 'rgba(0,0,0,0.5)';
        modal.style.zIndex = '9999';
        modal.innerHTML = `<div id="file-viewer-content" style="background:#fff;max-width:700px;margin:40px auto;padding:24px;border-radius:8px;position:relative;box-shadow:0 8px 32px #0002;">
            <button id="close-file-viewer" style="position:absolute;top:12px;right:12px;font-size:1.5em;">√ó</button>
            <h2 style="margin-top:0;">${title}</h2>
            <div id="file-viewer-body"></div>
        </div>`;
        document.body.appendChild(modal);
        document.getElementById('close-file-viewer').onclick = () => modal.remove();
    } else {
        modal.querySelector('h2').textContent = title;
        modal.style.display = 'block';
    }
    const body = document.getElementById('file-viewer-body');
    body.innerHTML = '';
    if (typeof contentHtml === 'string') {
        body.innerHTML = `<pre style="white-space:pre-wrap;">${contentHtml}</pre>`;
    } else if (contentHtml instanceof HTMLElement) {
        body.appendChild(contentHtml);
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä manifest.json
window.viewManifest = async function(pluginId) {
    const { error } = useErrorHandler();
    try {
        const text = await useFileViewer(pluginId, 'manifest.json');
        const json = JSON.parse(text);
        const container = document.createElement('div');
        createJsonViewer(json, container);
        showFileModal('manifest.json', container);
    } catch (e) {
        error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ manifest.json: ' + e.message);
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä workflow.json
window.viewWorkflow = async function(pluginId) {
    const { error } = useErrorHandler();
    try {
        const text = await useFileViewer(pluginId, 'workflow.json');
        const json = JSON.parse(text);
        const container = document.createElement('div');
        createJsonViewer(json, container);
        showFileModal('workflow.json', container);
    } catch (e) {
        error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflow.json: ' + e.message);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
function setupTabs() {
  const tabContainer = document.querySelector('.tab-nav');
  if (!tabContainer) return;
  tabContainer.addEventListener('click', (event) => {
    const clickedButton = event.target.closest('.tab-button');
    if (!clickedButton) return;
    const tabId = clickedButton.dataset.tab;
    if (!tabId) return;
    tabContainer.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.add('hidden'));
    clickedButton.classList.add('active');
    document.getElementById(tabId)?.classList.remove('hidden');
  });
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ ---

// –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
window.pasteFromClipboard = async function(inputId) {
    try {
        const text = await navigator.clipboard.readText();
        document.getElementById(inputId).value = text;
        showSuccessToast('–ö–ª—é—á –≤—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞:', error);
        showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
window.copyToClipboard = async function(inputId) {
    try {
        const input = document.getElementById(inputId);
        await navigator.clipboard.writeText(input.value);
        showSuccessToast('–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä:', error);
        showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ curl –∑–∞–ø—Ä–æ—Å–∞
window.extractKeyFromCurl = function(curlInputId, keyInputId) {
    try {
        const curlInput = document.getElementById(curlInputId);
        const keyInput = document.getElementById(keyInputId);
        const curlText = curlInput.value;
        
        // –ò—â–µ–º API –∫–ª—é—á –≤ curl –∑–∞–ø—Ä–æ—Å–µ
        const apiKeyMatch = curlText.match(/['"]?api[_-]?key['"]?\s*[:=]\s*['"]([^'"]+)['"]/i) ||
                           curlText.match(/['"]?authorization['"]?\s*[:=]\s*['"]?bearer\s+([^'"\s]+)['"]?/i) ||
                           curlText.match(/['"]?x-api-key['"]?\s*[:=]\s*['"]([^'"]+)['"]/i);
        
        if (apiKeyMatch && apiKeyMatch[1]) {
            keyInput.value = apiKeyMatch[1];
            showSuccessToast('API –∫–ª—é—á –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ curl –∑–∞–ø—Ä–æ—Å–∞');
        } else {
            showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ API –∫–ª—é—á –≤ curl –∑–∞–ø—Ä–æ—Å–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
        showErrorToast('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ curl');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
async function loadSavedKeys() {
    const { error } = useErrorHandler();
    try {
        const keys = await useAIKeys.getAllKeys();
        if (keys['gemini-flash']) {
            document.getElementById('gemini-flash-key').value = keys['gemini-flash'];
        }
        if (keys['gemini-25']) {
            document.getElementById('gemini-25-key').value = keys['gemini-25'];
        }
        loadCustomKeys(keys);
        updateKeyStatuses();
    } catch (e) {
        error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π: ' + e.message);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
window.saveAIKeys = async function() {
    const { success, error } = useErrorHandler();
    try {
        await useAIKeys.setKey('gemini-flash', document.getElementById('gemini-flash-key').value);
        await useAIKeys.setKey('gemini-25', document.getElementById('gemini-25-key').value);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–∏
        const customKeys = getCustomKeys();
        for (const keyId in customKeys) {
            await useAIKeys.setKey(keyId, customKeys[keyId]);
        }
        success('–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        updateKeyStatuses();
    } catch (e) {
        error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π: ' + e.message);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
window.addCustomKey = function() {
    const customKeysList = document.getElementById('custom-keys-list');
    const keyId = 'custom-key-' + Date.now();
    const keyHtml = `
        <div class="custom-key-item" id="${keyId}">
            <button class="remove-key-btn" onclick="removeCustomKey('${keyId}')">–£–¥–∞–ª–∏—Ç—å</button>
            <div class="ai-key-header">
                <h4>
                    <input type="text" class="key-name-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏" 
                           onchange="updateCustomKeyName('${keyId}', this.value)">
                </h4>
                <span class="key-status" id="${keyId}-status">–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>
                <span class="key-badge paid">–ü–ª–∞—Ç–Ω—ã–π</span>
            </div>
            <div class="ai-key-input">
                <input type="password" id="${keyId}-key" placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á">
                <button onclick="pasteFromClipboard('${keyId}-key')">–í—Å—Ç–∞–≤–∏—Ç—å</button>
                <button onclick="copyToClipboard('${keyId}-key')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            </div>
            <div class="curl-validator">
                <input type="text" id="${keyId}-curl" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ curl –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞">
                <button onclick="extractKeyFromCurl('${keyId}-curl', '${keyId}-key')">–ò–∑–≤–ª–µ—á—å –∫–ª—é—á</button>
            </div>
        </div>
    `;
    customKeysList.insertAdjacentHTML('beforeend', keyHtml);
    useErrorHandler().success('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
window.removeCustomKey = async function(keyId) {
    const keyElement = document.getElementById(keyId);
    if (keyElement) {
        keyElement.remove();
        await useAIKeys.removeKey(keyId);
        useErrorHandler().success('–ö–ª—é—á —É–¥–∞–ª–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
window.updateCustomKeyName = async function(keyId, name) {
    await useCustomKeyNames.setName(keyId, name);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π
function getCustomKeys() {
    const customKeys = {};
    const customKeyElements = document.querySelectorAll('.custom-key-item');
    customKeyElements.forEach(element => {
        const keyId = element.id;
        const keyInput = element.querySelector('input[type="password"]');
        if (keyInput && keyInput.value) {
            customKeys[keyId] = keyInput.value;
        }
    });
    return customKeys;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π
async function loadCustomKeys(keys) {
    const customKeyNames = await useCustomKeyNames.getAllNames();
    Object.keys(keys).forEach(keyId => {
        if (keyId.startsWith('custom-key-') && keys[keyId]) {
            // –í–æ—Å—Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
            const customKeysList = document.getElementById('custom-keys-list');
            const keyName = customKeyNames[keyId] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å';
            const keyHtml = `
                <div class="custom-key-item" id="${keyId}">
                    <button class="remove-key-btn" onclick="removeCustomKey('${keyId}')">–£–¥–∞–ª–∏—Ç—å</button>
                    <div class="ai-key-header">
                        <h4>
                            <input type="text" class="key-name-input" value="${keyName}" 
                                   onchange="updateCustomKeyName('${keyId}', this.value)">
                        </h4>
                        <span class="key-status" id="${keyId}-status">–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>
                        <span class="key-badge paid">–ü–ª–∞—Ç–Ω—ã–π</span>
                    </div>
                    <div class="ai-key-input">
                        <input type="password" id="${keyId}-key" value="${keys[keyId]}" placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á">
                        <button onclick="pasteFromClipboard('${keyId}-key')">–í—Å—Ç–∞–≤–∏—Ç—å</button>
                        <button onclick="copyToClipboard('${keyId}-key')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                    <div class="curl-validator">
                        <input type="text" id="${keyId}-curl" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ curl –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞">
                        <button onclick="extractKeyFromCurl('${keyId}-curl', '${keyId}-key')">–ò–∑–≤–ª–µ—á—å –∫–ª—é—á</button>
                    </div>
                </div>
            `;
            customKeysList.insertAdjacentHTML('beforeend', keyHtml);
        }
    });
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–ª—é—á–µ–π
async function updateKeyStatuses(testResults = null) {
    const keys = await useAIKeys.getAllKeys();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    const fixedStatusElements = {
        'gemini-flash': document.getElementById('gemini-flash-status'),
        'gemini-25': document.getElementById('gemini-25-status')
    };
    for (const [keyName, statusElement] of Object.entries(fixedStatusElements)) {
        if (statusElement) {
            const hasKey = keys[keyName] && keys[keyName].length > 0;
            const isTested = testResults && keyName in testResults;
            if (isTested && testResults[keyName]) {
                statusElement.textContent = '–†–∞–±–æ—Ç–∞–µ—Ç';
                statusElement.className = 'key-status configured';
            } else if (hasKey) {
                statusElement.textContent = '–ù–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status configured';
            } else {
                statusElement.textContent = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status';
            }
        }
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª—é—á–µ–π
    const customKeyElements = document.querySelectorAll('.custom-key-item');
    customKeyElements.forEach(element => {
        const keyId = element.id;
        const statusElement = element.querySelector('.key-status');
        const keyInput = element.querySelector('input[type="password"]');
        if (statusElement && keyInput) {
            const hasKey = keyInput.value && keyInput.value.length > 0;
            const isTested = testResults && keyId in testResults;
            if (isTested && testResults[keyId]) {
                statusElement.textContent = '–†–∞–±–æ—Ç–∞–µ—Ç';
                statusElement.className = 'key-status configured';
            } else if (hasKey) {
                statusElement.textContent = '–ù–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status configured';
            } else {
                statusElement.textContent = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                statusElement.className = 'key-status';
            }
        }
    });
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
window.testAIKeys = async function() {
    const { success, error } = useErrorHandler();
    try {
        const keys = await useAIKeys.getAllKeys();
        const results = {};
        // –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞: –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API-–∑–∞–ø—Ä–æ—Å)
        for (const keyName in keys) {
            results[keyName] = keys[keyName] && keys[keyName].length > 0;
        }
        await updateKeyStatuses(results);
        success('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (e) {
        error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π: ' + e.message);
    }
}

// --- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
displayPlugins();
setupTabs();
loadSavedKeys();
handleUrlParameters(); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã